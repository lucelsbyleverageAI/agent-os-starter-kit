{"createdAt":"2025-09-22T16:43:40.801Z","updatedAt":"2025-10-04T21:52:09.354Z","id":"A1Q25Hu6dlqdPePM","name":"N8N AI Agent Template [READ ONLY - MAKE A COPY]","active":false,"isArchived":false,"nodes":[{"parameters":{"httpMethod":"POST","path":"4dd6b459-552b-41da-8865-c8b60e4022ed","responseMode":"streaming","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2.1,"position":[-1760,-1088],"id":"f3d68c16-8254-4458-b87f-d488762f0d63","name":"Webhook","webhookId":"4dd6b459-552b-41da-8865-c8b60e4022ed"},{"parameters":{"promptType":"define","text":"={{ $('Webhook').item.json.body.user_message }}","options":{"systemMessage":"You are a helpful assistant with access to a variety of tools","enableStreaming":true}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[-1152,-1088],"id":"c2a6dce5-0fa3-4e65-a1c8-82c53c96decf","name":"AI Agent","retryOnFail":true},{"parameters":{"model":{"__rl":true,"mode":"list","value":"gpt-4.1-mini"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[-1312,-864],"id":"655a861b-dc9f-4b51-b3f8-c402a6d1a5c5","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"tCOGOJ93xhYA7qpo","name":"OpenAi account"}}},{"parameters":{"respondWith":"allIncomingItems","options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.4,"position":[-800,-1088],"id":"c7144812-16f9-4ab9-936e-bc5142dfe93b","name":"Respond to Webhook"},{"parameters":{"content":"# LangGraph → n8n Agent Bridge\n\n#### What this is\nAn agent template showing how to wire an N8N agent into the frontend via our LangGraph backend, and connect it to the core components of our Agentic OS:\n- MCP server (custom tools)\n- Postgres (chat memories)\n- Memory tools (long‑term user memory)\n- Search tools (RAG over knowledge collections)\n\nN8N doesn’t match LangGraph’s auth model. In particular:\n- MCP is reachable only via a service account in N8N, so user‑scoped MCP tools aren’t available.\n- Collection search tools must be configured per collection.\n\nUse this as a template and extend either the N8N nodes or our backend endpoints as needed.\n\n#### How it works\nThe frontend sends messages to the LangGraph backend, which reformats and forwards them to your N8N webhook. N8N streams responses back, and LangGraph relays them to the client.\n\n#### Request flow\nUser (Frontend) → LangGraph Agent → N8N Webhook\n\n#### Payload structure\n```json\n{\n  \"thread_id\": \"191b1878-b3c4-498e-8c3f-338b8c14876a\",\n  \"user_message\": \"hi\",\n  \"config\": {\n    \"webhook_url\": \"http://...\",\n    \"user_id\": \"f243cd80-a497-4f8b-915b-097d0a868b00\",\n    \"thread_id\": \"191b1878-b3c4-498e-8c3f-338b8c14876a\",\n    \"assistant_id\": \"45cc340a-ae16-4835-a6a2-9589ce263763\",\n    \"run_id\": \"01999e4c-3397-73c2-83b7-50a66b5fe814\",\n    \"graph_id\": \"n8n_agent\"\n  }\n}\n```\n\n#### Key fields\n- `thread_id`: Conversation identifier (also present in `config`).\n- `user_message`: The user’s input string.\n- `config`: LangGraph runtime context including:\n  - `user_id` (for user‑specific logic in workflows)\n  - `assistant_id` (agent configuration)\n  - `run_id`, `graph_id` (execution metadata)\n  - Any custom frontend configuration (JSON‑serialisable only)\n\n#### N8N webhook configuration\n- Method: POST\n- Content‑Type: application/json\n- Response mode: streaming (Respond to Webhook set to “All Incoming Items”)\n- Behaviour: your workflow streams JSON objects; LangGraph forwards them to the client.\n\n### Auth & Credentials Setup\nConfigure four credentials for this template agent:\n- Chat model (LLM)\n  - Used by: `AI Agent` / model node.\n  - Configure: Add your model provider credential (e.g. OpenAI) and select it on the model node.\n- Postgres (conversation memory)\n  - Used by: `Postgres Memory` node.\n  - Configure: Create a Postgres credential and set the password to your `POSTGRES_PASSWORD`. Ensure host/DB/user match your compose config.\n- LangConnect service account (memory + search tools)\n  - Used by: all LangConnect Memory and RAG Search tool nodes.\n  - Credential type: Header Auth.\n  - Header name: `Authorization`\n  - Header value: `Bearer <LANGCONNECT_SERVICE_ACCOUNT_KEY>`\n  - Then select this credential in every Memory/Search node.\n- MCP service account (MCP client tools)\n  - Used by: `MCP Client` node.\n  - Credential type: Header Auth.\n  - Header name: `Authorization`\n  - Header value: `Bearer <MCP_SERVICE_ACCOUNT_KEY>`\n  - Then select this credential on the MCP Client node.\n\n#### Memory tools (summary)\n- Direct API usage to LangConnect memory endpoints (e.g. `http://langconnect:8080`).\n- Use service account auth; include `user_id` when impersonating:\n  - POST endpoints: `user_id` in JSON body (e.g. `/memory/add`, `/memory/search`)\n  - GET/PUT/DELETE: `user_id` as a query param (e.g. `/memory/{id}?user_id=...`)\n- Scope via `agent_id` and `run_id` as needed.\n\n#### Search tools (RAG) — important notes\n- Pre‑built endpoints:\n  - Semantic (vector): `POST /collections/{collection_id}/semantic_search`\n  - Keyword (full‑text): `POST /collections/{collection_id}/keyword_search`\n  - Hybrid (combined): `POST /collections/{collection_id}/hybrid_search`\n- LLM‑friendly options:\n  - `format_chunks_for_llm=true`: Return clean, hierarchical markdown.\n  - `return_surrounding_context=true`: Include surrounding context.\n    - Context means neighbouring chunks and/or full document excerpts around each hit, bounded by `max_context_characters` (default 2000).\n  - `limit`: Cap results (1–100).\n  - Hybrid only: `semantic_weight` balances vector vs keyword relevance.\n- CRITICAL: configure your collection\n  - You must set the `collection_id` in each Search Tool node’s URL path. This is easy to miss.\n  - Example: `http://langconnect:8080/collections/550e8400-e29b-41d4-a716-446655440000/semantic_search`\n  - We currently support one collection per tool. To expose multiple collections, duplicate the nodes with different hard‑coded `collection_id`s.\n- Improve tool clarity\n  - Update each node’s `toolDescription` to describe the specific collection (e.g. “Internal policy docs”) so the agent knows when/how to use it.\n\n#### Setup checklist\n- Choose search type(s): semantic, keyword, or hybrid; add the corresponding tool nodes.\n- Configure collection access: replace the `{collection_id}` placeholder in each node’s URL with your target collection UUID.\n- Describe the collection: adjust `toolDescription` with scope/context and usage hints.\n- Tune parameters (optional): `format_chunks_for_llm`, `return_surrounding_context`, `max_context_characters`, `limit`, and `semantic_weight` (hybrid).\n- Ensure langconnect auth is setup (see auth section above)\n- Extend if needed: add custom search endpoints or logic in `LangConnect` and point nodes to them.\n\n#### Notes\n- `config` only contains JSON‑serialisable values (complex runtime objects are stripped).\n- LangGraph manages bi‑directional streaming between N8N and the frontend.\n- Use `thread_id` to maintain dialogue continuity across requests.\n- `user_id` enables user‑specific behaviour in N8N flows.\n\nIf you want, I can also add a small “Troubleshooting” block (401/404/400 patterns) to this section.","height":2304,"width":1552},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-3936,-2640],"id":"29305b92-2ecd-445f-b154-c4ec59909092","name":"Sticky Note"},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $('Webhook').item.json.body.thread_id }}","tableName":"langconnect.n8n_chat_histories","contextWindowLength":25},"type":"@n8n/n8n-nodes-langchain.memoryPostgresChat","typeVersion":1.3,"position":[-1152,0],"id":"d9ea080d-cc11-488e-b8d8-3ea138ed560a","name":"Postgres Chat Memory","credentials":{"postgres":{"id":"X78pH0HAnJIgfNp2","name":"Postgres account"}}},{"parameters":{"content":"# Model Node\n\n- **Configure credentials**\n  - Set your `OPENAI_API_KEY` (or replace with another provider’s key).\n- **Models**\n  - Select any available model for your account. You may swap the node for a different provider (Anthropic, OpenRouter, etc.) if preferred.\n- **Notes**\n  - Adjust rate limits and temperature to suit your use case.\n  - Be mindful of usage costs; long contexts and high output tokens increase spend.","height":336,"width":544,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1920,-880],"id":"1997e9a3-cfde-4fe9-90f2-16cfa2c5112e","name":"Sticky Note1"},{"parameters":{"content":"## Webhook Node\nThis should work as it is pre-configured.\n- **Method**: POST\n- **Response Mode**: Set to \"streaming\" for real-time responses\n- **Response**: Your n8n workflow should stream JSON objects back to the LangGraph using a Respond to Webhook node set to 'All Incoming Items'","height":352,"width":432,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1952,-1296],"id":"5dff2cc4-26b6-4183-ae65-209516a61248","name":"Sticky Note2"},{"parameters":{"content":"# Postgres Chat Memory Node\n\n- **Configure credentials**\n  - Set `POSTGRES_PASSWORD` in your environment (see `.env.local`).\n- **Connection (internal Docker network)**\n  - **Host**: `db`\n  - **Port**: `5432`\n  - **Database**: `postgres`\n  - **User**: `postgres`\n  - **Password**: `POSTGRES_PASSWORD`\n  - **SSL**: disabled for local development\n- **Purpose**\n  - Persists thread histories to `langconnect.n8n_chat_histories` for retrieval across workflow runs.\n- **Notes**\n  - Ensure the Supabase stack is running and reachable from the workflow container.\n  - If connection fails, verify the password and that the `db` service is healthy.","height":496,"width":544,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1744,-176],"id":"d539647c-a464-4c6e-8413-e5de21c26d32","name":"Sticky Note3"},{"parameters":{"endpointUrl":"http://mcp-server:8001/mcp","serverTransport":"httpStreamable","authentication":"headerAuth","include":"selected","includeTools":["execute_code","tavily-map","tavily-crawl","tavily-extract","tavily-search"],"options":{"timeout":360000}},"type":"@n8n/n8n-nodes-langchain.mcpClientTool","typeVersion":1.1,"position":[-80,-912],"id":"f563a334-e647-45bc-8d05-9dde2fd68a78","name":"MCP Client","credentials":{"httpHeaderAuth":{"id":"RzStLdBK4VVr00xO","name":"MCP Header Auth"}}},{"parameters":{"content":"# MCP Client Node\n\n- **How to connect (inside Docker)**  \n  - Endpoint: `http://mcp-server:8001/mcp`  \n  - Auth: send exactly one header (configure with your mcp service account key)\n    ```\n    Authorization: Bearer <MCP_SERVICE_ACCOUNT_KEY>\n    ```\n  - From your host instead: `http://localhost:8002/mcp`\n\n- **What this client can do**  \n  - Use tools that are not user‑scoped (stateless/system tools defined under `custom` toolkits).  \n  - Health checks without auth:  \n    - `GET /health`  \n    - `GET /.well-known/oauth-protected-resource`\n\n- **What it cannot do (by design)**  \n  - No OAuth or extra headers: N8N’s MCP node cannot add user context (e.g. `user_id`, `thread_id`) or run an OAuth flow.  \n  - Calls authenticate as a single service account only; the server sets `user_id=\"service_account\"` and enforces restrictions.  \n  - Therefore, do not include tools that require user identity:\n    - **Memory tools**: blocked for service accounts (expect a 403).  \n    - **Arcade tools**: require per‑user OAuth; service account calls return an authorisation prompt URL you cannot complete from N8N.","height":672,"width":592,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-752,-928],"id":"59f5339c-3878-47ff-8827-b23a82eeeb65","name":"Sticky Note4"},{"parameters":{"toolDescription":"Add a new memory for the current user. Use this to store important facts, preferences, or context that should be remembered for future conversations. Provide the memory content and optional metadata.","method":"POST","url":"http://langconnect:8080/memory/add","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"content","value":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `The memory content to store`, 'string') }}"},{"name":"agent_id","value":"={{ $('Webhook').item.json.body.config.assistant_id }}"},{"name":"run_id","value":"={{ $('Webhook').item.json.body.config.run_id }}"},{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[-2128,48],"id":"5ef5a644-7e5d-4859-a9e3-a810b8c6d557","name":"Add Memory","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"content":"# Memory Tool Nodes\n\nOur memory tools provide direct integration with LangConnect’s Memory API, enabling agents to add, search, update, and delete memories without routing through the MCP server. Each node accepts execution context from earlier workflow steps (user_id, agent_id, run_id) and applies it to the API call.\n\n- **Direct API usage**: Calls `LangConnect` endpoints from n8n (internal network URL, e.g. `http://langconnect:8080`).\n- **Context-aware**: Pass `user_id` (required for service account usage), plus optional `agent_id` and `run_id`.\n- **Full coverage**: Add, search, get, update, delete, and history operations.\n\n#### Required configuration\n\n- **Service account key (mandatory)**:\n  - Ensure the environment variable `LANGCONNECT_SERVICE_ACCOUNT_KEY` is set for LangConnect.\n  - In n8n, create a “Header Auth” credential:\n    - Header name: `Authorization`\n    - Value: `Bearer <your LANGCONNECT_SERVICE_ACCOUNT_KEY>`\n  - Select this credential in each Memory Tool node.\n\n- **User impersonation with service account**:\n  - When using the service account key, include the target `user_id`:\n    - POST endpoints: in the JSON body (e.g. `/memory/add`, `/memory/search`).\n    - GET/PUT/DELETE endpoints: as a query parameter (e.g. `/memory/{id}?user_id=...`).\n\nThis setup ensures authenticated, user-scoped memory operations from n8n, with clear attribution and auditability.","height":688,"width":1168,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-3072,-256],"id":"4c2bada4-954e-4989-9923-5fe2f733cc52","name":"Sticky Note5"},{"parameters":{"toolDescription":"Search for memories based on a query. Returns memories semantically similar to the search query, ranked by relevance. Use this to recall relevant information from past conversations.","method":"POST","url":"http://langconnect:8080/memory/search","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"query","value":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `The search query to find relevant memories`, 'string') }}"},{"name":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Name', `Maximum number of results (default: 10, max: 100)`, 'string') }}","value":"=10"},{"name":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Name', `Minimum similarity threshold 0.0-1.0 (default 0.5)`, 'string') }}","value":"=0.5"},{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[-2304,240],"id":"aba0cf20-2c49-4667-9d2b-f9d809dea20f","name":"Search Memory","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"Get all memories for the current user. Returns a paginated list of all stored memories with their IDs, content, and timestamps. Use limit and offset for pagination.","url":"http://langconnect:8080/memory/all","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"parametersQuery":{"values":[{"name":"user_id","valueProvider":"fieldValue","value":"={{ $('Webhook').item.json.body.config.user_id }}"},{"name":"limit","valueProvider":"modelOptional"},{"name":"offset","valueProvider":"modelOptional"}]},"placeholderDefinitions":{"values":[{"name":"limit","description":"Maximum number of memories to return (default: 50, max: 1000)","type":"number"},{"name":"offset","description":"Number of memories to skip for pagination (default: 0)","type":"number"}]}},"type":"@n8n/n8n-nodes-langchain.toolHttpRequest","typeVersion":1.1,"position":[-2016,224],"id":"a621e33f-cc7b-4bec-af18-6838d4de0462","name":"Get All Memories","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"Delete a specific memory by its ID. This permanently removes the memory from storage and cannot be undone.","method":"DELETE","url":"http://langconnect:8080/memory/{memory_id}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"parametersQuery":{"values":[{"name":"user_id","valueProvider":"fieldValue","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"placeholderDefinitions":{"values":[{"name":"memory_id","description":"The ID of the memory to delete","type":"string"}]}},"type":"@n8n/n8n-nodes-langchain.toolHttpRequest","typeVersion":1.1,"position":[-2160,224],"id":"59e4886b-9f06-4206-a9cc-0cdf41526bf0","name":"Delete Memory","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"Update an existing memory by its ID. Provide the memory_id and the new content.","method":"PUT","url":"http://langconnect:8080/memory/{memory_id}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"parametersQuery":{"values":[{"name":"user_id","valueProvider":"fieldValue","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"sendHeaders":true,"parametersHeaders":{"values":[{"name":"Content-Type","valueProvider":"fieldValue","value":"application/json"}]},"sendBody":true,"parametersBody":{"values":[{"name":"content","valueProvider":"modelOptional"},{"name":"metadata","valueProvider":"modelOptional"}]},"placeholderDefinitions":{"values":[{"name":"memory_id","description":"The ID of the memory to update","type":"string"},{"name":"content","description":"New content for the memory","type":"string"},{"name":"metadata","description":"New metadata for the memory as a JSON object","type":"json"}]}},"type":"@n8n/n8n-nodes-langchain.toolHttpRequest","typeVersion":1.1,"position":[-2256,48],"id":"ad5ccb3a-cfb4-4e84-a116-33c80662af7b","name":"Update Memory","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"content":"# Search Tool Nodes\n\nOur search tools integrate directly with LangConnect’s Collections API to perform RAG over a chosen collection. We provide three pre‑configured endpoints:\n- **Semantic (Vector) search**: `POST /collections/{collection_id}/semantic_search`\n- **Keyword (Full‑Text) search**: `POST /collections/{collection_id}/keyword_search`\n- **Hybrid search**: `POST /collections/{collection_id}/hybrid_search`\n\n- **Direct API usage**: Calls LangConnect from n8n (internal URL, e.g. `http://langconnect:8080`).\n- **LLM‑friendly output**: Optional formatting for LLMs and surrounding context.\n- **Scope**: Each tool searches a single collection (specified via `collection_id` in the node URL).\n\n#### Key settings (tweak if needed)\n- **LLM formatting**: `format_chunks_for_llm=true` to return clean markdown.\n- **Context**: `return_surrounding_context=true`, `max_context_characters` to control context size (this setting returns more chunks before and after the matched chunks up to the context limit to provide more surrounding context from the relevant document).\n- **Relevance**:\n  - `limit` (1–100) to cap results.\n  - `semantic_weight` (hybrid only) balances vector vs keyword results.\n- **Filtering**: Optional `filter` JSON for metadata‑based narrowing.\n\n#### Important notes\n- This is a template implementation; you can adjust or extend the endpoints and behaviour in `LangConnect`.\n- We currently support one collection per tool. To expose multiple collections, **duplicate the nodes and hard‑code a different `collection_id` in each URL parameter**.\n- Please update each node’s `toolDescription` to describe the specific collection (e.g., “internal policy docs”), so the AI knows when/how to use it.\n\n#### Required configuration\n- **Service account key (mandatory)**:\n  - Ensure `LANGCONNECT_SERVICE_ACCOUNT_KEY` is set for LangConnect.\n  - In n8n, create a “Header Auth” credential:\n    - Header name: `Authorization`\n    - Value: `Bearer <your LANGCONNECT_SERVICE_ACCOUNT_KEY>`\n  - Select this credential in each Search Tool node.\n\n#### How to configure (template → usable)\n1. **Choose search type**: Add the nodes you need (keyword, semantic, or hybrid).\n2. **Set collection**: In each node’s URL, replace the `collection_id` placeholder with your target collection UUID.\n3. **Describe the collection**: Update `toolDescription` to explain what’s inside and when to use it.\n4. **Auth**: Select the “Header Auth” credential that uses your `LANGCONNECT_SERVICE_ACCOUNT_KEY`.\n5. **Tune parameters** (optional): Enable LLM formatting, set context size, adjust `limit`, and (for hybrid) `semantic_weight`.\n6. **Extend if needed**: Implement custom search endpoints or logic in `LangConnect` and point the nodes at your new routes.","height":1040,"width":1536,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-864,-48],"id":"3469affa-58bc-4e68-8f67-c33f180a0e25","name":"Sticky Note6"},{"parameters":{"toolDescription":"Search a knowledge collection using semantic/vector similarity. Provide a natural language query to find relevant information. Returns the most semantically similar content from the collection.","method":"POST","url":"=http://langconnect:8080/collections/{YOUR_COLLECTION_ID}/semantic_search","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"query","value":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('query', 'The natural language search query to find relevant information', 'string') }}"},{"name":"limit","value":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('limit', 'Maximum number of results to return (1-100, default: 10)', 'number') || 10 }}"},{"name":"format_chunks_for_llm","value":"true"},{"name":"return_surrounding_context","value":"true"},{"name":"max_context_characters","value":"2000"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[480,128],"id":"1f2d15fb-70fb-4f88-b25e-ae55995b92d8","name":"Semantic Search (Vector)","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}},"notes":"Searches using semantic/vector similarity. Best for: conceptual queries, finding related ideas, natural language questions.\n\nConfiguration:\n- Set 'collection_id' in Workflow Settings → Static Data → collection_id\n- Or pass dynamically: Change URL to use {{ $json.collection_id }}\n- Requires LangConnect service account authentication"},{"parameters":{"toolDescription":"Search a knowledge collection using keyword matching. Provide specific keywords or phrases to find exact or similar matches. Returns content ranked by keyword relevance.","method":"POST","url":"=http://langconnect:8080/collections/{YOUR_COLLECTION_ID}/keyword_search","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"keywords","value":"={{ $fromAI('keywords', 'Comma-separated keywords or phrases to search for (e.g., \"machine learning, neural networks, AI\")', 'string').split(',').map(k => k.trim()).filter(k => k) }}"},{"name":"limit","value":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('limit', 'Maximum number of results to return (1-100, default: 10)', 'number') || 10 }}"},{"name":"format_chunks_for_llm","value":"true"},{"name":"return_surrounding_context","value":"true"},{"name":"max_context_characters","value":"2000"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[656,16],"id":"a27889e3-20ca-4162-b2bd-5b431153eaed","name":"Keyword Search (Full-Text)","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}},"notes":"Searches using keyword/full-text matching. Best for: specific terms, technical jargon, exact phrases, product names.\n\nConfiguration:\n- Set 'collection_id' in Workflow Settings → Static Data → collection_id\n- Or pass dynamically: Change URL to use {{ $json.collection_id }}\n- Requires LangConnect service account authentication"},{"parameters":{"toolDescription":"Search a knowledge collection using hybrid search (combines semantic and keyword search). Provide both a natural language query and specific keywords for best results. Returns content ranked by combined relevance.","method":"POST","url":"=http://langconnect:8080/collections/{YOUR_COLLECTION_ID}/hybrid_search","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"query","value":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('query', 'The natural language search query', 'string') }}"},{"name":"keywords","value":"={{ $fromAI('keywords', 'Comma-separated keywords or phrases to search for (e.g., \"machine learning, neural networks, AI\")', 'string').split(',').map(k => k.trim()).filter(k => k) }}"},{"name":"limit","value":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('limit', 'Maximum number of results to return (1-100, default: 10)', 'number') || 10 }}"},{"name":"semantic_weight","value":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('semantic_weight', 'Weight for semantic vs keyword results (0.0-1.0, default: 0.5)', 'number') || 0.5 }}"},{"name":"format_chunks_for_llm","value":"true"},{"name":"return_surrounding_context","value":"true"},{"name":"max_context_characters","value":"2000"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[784,144],"id":"88769fb3-3fbf-4b1c-b20a-11cad881d115","name":"Hybrid Search (Vector + Keywords)","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}},"notes":"Combines semantic and keyword search. Best for: comprehensive searches, when you want both conceptual and exact matches.\n\nConfiguration:\n- Set 'collection_id' in Workflow Settings → Static Data → collection_id\n- Or pass dynamically: Change URL to use {{ $json.collection_id }}\n- Adjust 'semantic_weight' (0.0=keywords only, 1.0=semantic only, 0.5=balanced)\n- Requires LangConnect service account authentication"},{"parameters":{"assignments":{"assignments":[{"id":"931a13ed-fae9-4f29-a664-01a1a4892dbd","name":"collection_ids","value":"=566c4003-21dc-4595-bf48-2f1a6dddd4a7,f3bf87c9-f1d9-4e9a-bc02-c017ff1dbd7b","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1408,-1088],"id":"90b91b47-90e3-4eb8-8379-85b863a60bf8","name":"Set Available Collection IDs"},{"parameters":{"toolDescription":"List collections accessible to this agent with key metadata. Returns each collection's id, name, description, document count, total size, and your permission level (viewer/editor/owner). Use this to discover what collections are available before searching or reading files.","url":"http://langconnect:8080/agent-filesystem/collections","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"scoped_collections","value":"={{ $json.collection_ids }}"},{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[1648,-176],"id":"9f8040cb-26c7-4965-8ae3-4013b0b1a3c0","name":"FS List Collections","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"Read document content with line numbers and optional pagination. Returns formatted content with metadata including document name, total lines, line range, and whether content is truncated. Use offset and limit to page through large files.","url":"=http://langconnect:8080/agent-filesystem/files/{{ $fromAI('document_id', 'Document UUID to read (required)', 'string') }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"scoped_collections","value":"={{ $json.collection_ids }}"},{"name":"include_line_numbers","value":"true"},{"name":"offset","value":"={{ $fromAI('offset', 'Starting line number, 0-based (default: 0)', 'number') || 0 }}"},{"name":"limit","value":"={{ $fromAI('limit', 'Number of lines to return (1-5000, default: 2000)', 'number') || 2000 }}"},{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[1968,-176],"id":"305ac72e-5a3f-4a61-beac-15f758f09524","name":"FS Read File","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"Search across your scoped collections using hybrid semantic + keyword search. Combines vector similarity with keyword matching for comprehensive results. Returns LLM-formatted content with document citations and context. Optionally filter to a specific collection.","method":"POST","url":"http://langconnect:8080/agent-filesystem/search","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"query","value":"={{ $fromAI('query', 'Natural language search query (required)', 'string') }}"},{"name":"keywords","value":"={{ $fromAI('keywords', 'Optional comma-separated keywords (e.g., \"AI, machine learning\")', 'string').split(',').map(k => k.trim()).filter(k => k) }}"},{"name":"collection_id","value":"={{ $fromAI('collection_id', 'Optional collection UUID to limit search scope', 'string') }}"},{"name":"limit","value":"={{ $fromAI('limit', 'Maximum number of results (1-20, default: 5)', 'number') || 5 }}"},{"name":"max_context_characters","value":"={{ $fromAI('max_context_characters', 'Maximum context characters per result (0-10000, default: 2500)', 'number') || 2500 }}"},{"name":"semantic_weight","value":"={{ $fromAI('semantic_weight', 'Weight for semantic vs keyword (0.0-1.0, default: 0.6)', 'number') || 0.6 }}"},{"name":"scoped_collections","value":"={{ $json.collection_ids }}"},{"name":"return_surrounding_context","value":"true"},{"name":"format_chunks_for_llm","value":"true"},{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[2128,-176],"id":"df36302f-38bf-4e9a-aa1c-a2fddce66139","name":"FS Hybrid Search","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"Find lines matching text or regex patterns across files. Returns matches with line numbers, line content, and surrounding context (2 lines before/after). Supports case-sensitive search and optional collection filtering. Start with simple text, add regex as needed.","method":"POST","url":"http://langconnect:8080/agent-filesystem/files/search","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"pattern","value":"={{ $fromAI('pattern', 'Text or regex pattern to search for (required)', 'string') }}"},{"name":"collection_id","value":"={{ $fromAI('collection_id', 'Optional collection UUID to filter search', 'string') }}"},{"name":"case_sensitive","value":"={{ $fromAI('case_sensitive', 'Whether search should be case-sensitive (default: false)', 'boolean') || false }}"},{"name":"max_results","value":"={{ $fromAI('max_results', 'Maximum number of matches to return (1-500, default: 100)', 'number') || 100 }}"},{"name":"scoped_collections","value":"={{ $json.collection_ids }}"},{"name":"context_lines","value":"2"},{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[2288,-176],"id":"9fbc9e01-7975-4858-92cd-fcbe4844e550","name":"FS Grep Files","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"Create a new document in a collection using markdown format unless otherwise specified. Provide a clear title and well-formatted content for best retrieval quality. Returns document_id, size, and processing status. Document will be automatically chunked and embedded.","method":"POST","url":"=http://langconnect:8080/agent-filesystem/collections/{{ $fromAI('collection_id', 'Target collection UUID (required)', 'string') }}/files","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"name","value":"={{ $fromAI('name', 'Document name/title (required)', 'string') }}"},{"name":"content","value":"={{ $fromAI('content', 'Document content in markdown format (required)', 'string') }}"},{"name":"metadata","value":"={{ $fromAI('metadata', 'Optional additional metadata as JSON object', 'string') }}"},{"name":"scoped_collections","value":"={{ $json.collection_ids }}"},{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[2448,-176],"id":"945f6f51-6cbf-4173-b448-d59b8ba0daeb","name":"FS Write File","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"Replace exact text in a document using markdown format. Read the file first and include unique surrounding context in old_string to avoid ambiguous matches. Returns a diff preview, change counts, and processing status. Document will be automatically re-chunked and re-embedded.","method":"PATCH","url":"=http://langconnect:8080/agent-filesystem/files/{{ $fromAI('document_id', 'Document UUID to edit (required)', 'string') }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"old_string","value":"={{ $fromAI('old_string', 'Exact text to replace; include unique surrounding context (required)', 'string') }}"},{"name":"new_string","value":"={{ $fromAI('new_string', 'Replacement text; use empty string to delete (required)', 'string') }}"},{"name":"replace_all","value":"={{ $fromAI('replace_all', 'Replace all occurrences instead of requiring unique match (default: false)', 'boolean') || false }}"},{"name":"scoped_collections","value":"={{ $json.collection_ids }}"},{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[2608,-176],"id":"1d32e683-fa8c-4651-9c8e-5c104dca8eeb","name":"FS Edit File","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"Permanently delete a document and all its chunks/embeddings (irreversible). Requires owner permission on the collection. Returns confirmation with document name and number of chunks deleted. Confirm the target document before using this tool.","method":"DELETE","url":"=http://langconnect:8080/agent-filesystem/files/{{ $fromAI('document_id', 'Document UUID to permanently delete (required)', 'string') }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"scoped_collections","value":"={{ $json.collection_ids }}"},{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[2768,-176],"id":"13f10edf-caaf-4b89-9f7f-6716a14a6193","name":"FS Delete File","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"List files across your scoped collections or filter to a specific collection. Use this to discover files before reading or editing them. Provide the collection ID not the collection name.","url":"http://langconnect:8080/agent-filesystem/files","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"scoped_collections","value":"={{ $json.collection_ids }}"},{"name":"collection_id","value":"={{ $fromAI('collection_id', 'Optional collection UUID to filter results', 'string') }}"},{"name":"limit","value":"={{ $fromAI('limit', 'Maximum number of files to return (1-500, default: 100)', 'number') || 100 }}"},{"name":"sort_by","value":"={{ $fromAI('sort_by', 'Sort field: updated_at (default), created_at, name, or size', 'string') || 'updated_at' }}"},{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[1808,-176],"id":"4e0d004e-42e3-40e3-90a0-a885d5af191a","name":"FS List Files","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"content":"# File System Tools\n\n## Overview\nThese tools provide agentic file system access to the knowledge collections in Langconnect. All tools respect the `collection_ids` scoped in the agent configuration.\n\n## Collection Scoping\n- **Backend configuration**: LangGraph passes `collection_ids` in the webhook payload under `config`\n- **Tool enforcement**: Each tool injects `scoped_collections` from `$json.body.config.collection_ids`\n- **Security**: Backend validates all requests against user permissions and agent scope\n- **LLM flexibility**: LLM can optionally filter to specific collections but cannot escape the configured scope\n\n## Available Tools\n\n### Discovery Tools\n1. **FS List Collections**: Discover what collections are accessible\n2. **FS List Files**: Browse files across collections with filtering and sorting\n\n### Read Operations\n3. **FS Read File**: Read document content with line numbers and pagination\n4. **FS Hybrid Search**: Semantic + keyword search across collections\n5. **FS Grep Files**: Pattern/regex search with line matches and context\n\n### Write Operations\n6. **FS Write File**: Create new markdown documents\n7. **FS Edit File**: String replacement with diff preview\n\n### Delete Operations\n8. **FS Delete File**: Permanently remove documents (owner permission required)\n\n## Configuration Notes\n\n- **Credentials**: All tools use \"Langconnect Header Auth\" (service account)\n- **Collection IDs**: Automatically injected from `$json.body.config.collection_ids`\n- **Format**: Documents use markdown format unless otherwise specified\n- **Processing**: Write/Edit operations trigger automatic re-chunking and re-embedding","height":976,"width":1200,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[1568,-32],"id":"3525ea96-e033-462d-b05d-9b4431234182","name":"File System Tools Overview"}],"connections":{"Webhook":{"main":[[{"node":"Set Available Collection IDs","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"AI Agent":{"main":[[{"node":"Respond to Webhook","type":"main","index":0}]]},"Postgres Chat Memory":{"ai_memory":[[{"node":"AI Agent","type":"ai_memory","index":0}]]},"MCP Client":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Add Memory":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Search Memory":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Update Memory":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Delete Memory":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Get All Memories":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Keyword Search (Full-Text)":{"ai_tool":[[]]},"Semantic Search (Vector)":{"ai_tool":[[]]},"Hybrid Search (Vector + Keywords)":{"ai_tool":[[]]},"Set Available Collection IDs":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"FS List Files":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"FS List Collections":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"FS Read File":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"FS Hybrid Search":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"FS Grep Files":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"FS Write File":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"FS Edit File":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"FS Delete File":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"Webhook":[{"json":{"headers":{"host":"localhost:5678","content-type":"application/json","accept":"*/*","accept-encoding":"gzip, deflate","user-agent":"Python/3.12 aiohttp/3.12.15","content-length":"886"},"params":{},"query":{},"body":{"thread_id":"191b1878-b3c4-498e-8c3f-338b8c14876a","user_message":"what files are in that collection? (use the collection id, not the name, as the input)","config":{"webhook_url":"http://localhost:5678/webhook/4dd6b459-552b-41da-8865-c8b60e4022ed","langgraph_auth_user_id":"f243cd80-a497-4f8b-915b-097d0a868b00","langgraph_auth_permissions":[],"langgraph_request_id":"b4fc90f2-7a34-4926-b783-2ecbdbe297de","__request_start_time_ms__":1759297418128,"__after_seconds__":0,"run_id":"01999e4c-3397-73c2-83b7-50a66b5fe814","thread_id":"191b1878-b3c4-498e-8c3f-338b8c14876a","graph_id":"n8n_agent","assistant_id":"45cc340a-ae16-4835-a6a2-9589ce263763","user_id":"7d3d91a4-46d0-4365-8ccf-4feecc02c2ac","__pregel_durability":"async","__pregel_task_id":"6a1c0720-e7f8-a08e-85b7-d020efc148bd","checkpoint_map":{"":"1f09e899-49d4-6a0a-8000-2cfb7d7e8937"},"checkpoint_id":null,"checkpoint_ns":"n8n_bridge:6a1c0720-e7f8-a08e-85b7-d020efc148bd"}},"webhookUrl":"http://localhost:5678/webhook/4dd6b459-552b-41da-8865-c8b60e4022ed","executionMode":"production"}}]},"versionId":"127f1cc1-72de-42a7-938d-0986fb605fc6","triggerCount":1,"tags":[]}