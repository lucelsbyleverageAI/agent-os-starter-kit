{"createdAt":"2025-09-22T16:43:40.801Z","updatedAt":"2025-10-05T17:20:55.548Z","id":"A1Q25Hu6dlqdPePM","name":"N8N AI Agent Template [READ ONLY - MAKE A COPY]","active":false,"isArchived":false,"nodes":[{"parameters":{"httpMethod":"POST","path":"4dd6b459-552b-41da-8865-c8b60e4022ed","responseMode":"streaming","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2.1,"position":[-1760,-1088],"id":"f3d68c16-8254-4458-b87f-d488762f0d63","name":"Webhook","webhookId":"4dd6b459-552b-41da-8865-c8b60e4022ed"},{"parameters":{"promptType":"define","text":"={{ $('Webhook').item.json.body.user_message }}","options":{"systemMessage":"=# Role\n\nYou are an AI assistant that uses tools to help the user achieve their task.\n\n# Task\n\nRespond to the user's request. Use your tools when needed to gather, create, or update information. Keep responses clear, concise, and focused on helping the user achieve their goal.\n\n# Tools available\n\n* **Memory tools:** Use these to remember or recall key facts, preferences, or context from previous interactions.\n* **File system tools:** Use these to read, write, or edit documents and data stored within scoped collections.\n* **Search tools:** Use these to find relevant information across available collections or documents.\n\n# Guidelines\n\n* Use tools when required to answer accurately or perform an action.\n* Summarise your actions so the user understands what you did.\n* Be concise by default, but expand when an explanation is helpful.\n* The user isn’t aware of which tools you used, so explain results in natural language.\n","enableStreaming":true}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[-1152,-1088],"id":"c2a6dce5-0fa3-4e65-a1c8-82c53c96decf","name":"AI Agent","retryOnFail":true},{"parameters":{"model":{"__rl":true,"value":"gpt-5","mode":"list","cachedResultName":"gpt-5"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[-1392,-864],"id":"655a861b-dc9f-4b51-b3f8-c402a6d1a5c5","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"tCOGOJ93xhYA7qpo","name":"OpenAi account"}}},{"parameters":{"respondWith":"allIncomingItems","options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.4,"position":[-800,-1088],"id":"c7144812-16f9-4ab9-936e-bc5142dfe93b","name":"Respond to Webhook"},{"parameters":{"content":"# LangGraph → n8n Agent Bridge\n\n#### What this is\nAn agent template showing how to wire an N8N agent into the frontend via our LangGraph backend, and connect it to the core components of our Agentic OS:\n- MCP server (custom tools)\n- Postgres (chat memories)\n- Memory tools (long‑term user memory)\n- Agent Filesystem & Search tools (document management and RAG over knowledge collections)\n\nN8N doesn't match LangGraph's auth model. In particular:\n- MCP is reachable only via a service account in N8N, so user‑scoped MCP tools aren't available.\n- Agent filesystem tools are automatically scoped to the agent's configured collections.\n\nUse this as a template and extend either the N8N nodes or our backend endpoints as needed.\n\n#### How it works\nThe frontend sends messages to the LangGraph backend, which reformats and forwards them to your N8N webhook. N8N streams responses back, and LangGraph relays them to the client.\n\n#### Request flow\nUser (Frontend) → LangGraph Agent → N8N Webhook\n\n#### Payload structure\n```json\n{\n  \"thread_id\": \"191b1878-b3c4-498e-8c3f-338b8c14876a\",\n  \"user_message\": \"hi\",\n  \"config\": {\n    \"webhook_url\": \"http://...\",\n    \"user_id\": \"f243cd80-a497-4f8b-915b-097d0a868b00\",\n    \"thread_id\": \"191b1878-b3c4-498e-8c3f-338b8c14876a\",\n    \"assistant_id\": \"45cc340a-ae16-4835-a6a2-9589ce263763\",\n    \"run_id\": \"01999e4c-3397-73c2-83b7-50a66b5fe814\",\n    \"graph_id\": \"n8n_agent\"\n  }\n}\n```\n\n#### Key fields\n- `thread_id`: Conversation identifier (also present in `config`).\n- `user_message`: The user's input string.\n- `config`: LangGraph runtime context including:\n  - `user_id` (for user‑specific logic in workflows)\n  - `assistant_id` (agent configuration)\n  - `run_id`, `graph_id` (execution metadata)\n  - Any custom frontend configuration (JSON‑serialisable only)\n\n#### N8N webhook configuration\n- Method: POST\n- Content‑Type: application/json\n- Response mode: streaming (Respond to Webhook set to \"All Incoming Items\")\n- Behaviour: your workflow streams JSON objects; LangGraph forwards them to the client.\n\n---\n\n## Auth & Credentials Setup\n\nConfigure four credentials for this template agent:\n\n### 1. Chat model (LLM)\n- **Used by**: `AI Agent` / model node\n- **Configure**: Add your model provider credential (e.g. OpenAI) and select it on the model node\n\n### 2. Postgres (conversation memory)\n- **Used by**: `Postgres Memory` node\n- **Configure**: Create a Postgres credential and set the password to your `POSTGRES_PASSWORD`. Ensure host/DB/user match your compose config\n\n### 3. LangConnect service account (filesystem + memory + search tools)\n- **Used by**: All LangConnect tool nodes (FS Write, FS Edit, FS Search, Memory nodes)\n- **Credential type**: Header Auth\n- **Header name**: `Authorization`\n- **Header value**: `Bearer <LANGCONNECT_SERVICE_ACCOUNT_KEY>`\n- **Setup**: Select this credential in every LangConnect tool node\n\n### 4. MCP service account (MCP client tools)\n- **Used by**: `MCP Client` node\n- **Credential type**: Header Auth\n- **Header name**: `Authorization`\n- **Header value**: `Bearer <MCP_SERVICE_ACCOUNT_KEY>`\n- **Setup**: Select this credential on the MCP Client node\n\n**⚠️ Important**: All service account requests to LangConnect must include `user_id` as a **query parameter** (not in the body) to impersonate users. This is automatically configured in the provided tool nodes.\n\n---\n\n## Agent Filesystem & Search Tools\n\nThe agent filesystem provides a unified, collection-scoped approach to document management and search. All tools automatically respect the agent's configured collection permissions via `scoped_collections`.\n\n### How Collection Scoping Works\n- Set the `collection_ids` (array of UUIDs the agent can access) in the `Set Available Collection IDs` node as a comma-separated list of collection UUIDs.\n- Tool nodes receive this via `{{ $json.collection_ids }}`\n- LangConnect enforces that agents can only access their scoped collections\n- No need to hardcode collection IDs in tool nodes anymore\n\n### Available Filesystem Endpoints\n\n**File Management:**\n- `POST /agent-filesystem/collections/{collection_id}/files` - Create new documents\n- `PATCH /agent-filesystem/files/{document_id}` - Edit documents (targeted or full replacement)\n- `GET /agent-filesystem/files/{document_id}` - Read document content\n- `DELETE /agent-filesystem/files/{document_id}` - Delete documents\n- `GET /agent-filesystem/files` - List files across collections\n- `GET /agent-filesystem/collections` - List accessible collections\n\n**Search:**\n- `POST /agent-filesystem/search` - Hybrid semantic + keyword search across all scoped collections\n  - Optionally filter to specific collection with `collection_id` parameter\n  - Automatically scoped to agent's configured collections\n  - Returns LLM-formatted content with citations\n\n---\n\n## Memory Tools\n\n- Direct API usage to LangConnect memory endpoints (e.g. `http://langconnect:8080`)\n- Use service account auth; include `user_id` when impersonating:\n  - POST endpoints: `user_id` in JSON body (e.g. `/memory/add`, `/memory/search`)\n  - GET/PUT/DELETE: `user_id` as a query param (e.g. `/memory/{id}?user_id=...`)\n- Scope via `agent_id` and `run_id` as needed\n\n---\n\n## Notes\n\n- The AI agent memory is somewhat limited as it doesn't appear to save tool calls and tool results in the conversation history (postgres store). Instead, it just saves AI and human messages. This means the AI agent doesn't have full knowledge of all the tool outputs from preceeding tool calls which can be frustrating, particularly if future tool calls rely on past ones (e.g., list collections -> search collections)\n- `config` only contains JSON‑serialisable values (complex runtime objects are stripped)\n- LangGraph manages bi‑directional streaming between N8N and the frontend\n- Use `thread_id` to maintain dialogue continuity across requests\n- `user_id` enables user‑specific behaviour in N8N flows","height":3104,"width":1552},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-5120,-3568],"id":"29305b92-2ecd-445f-b154-c4ec59909092","name":"Sticky Note"},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $('Webhook').item.json.body.thread_id }}","tableName":"langconnect.n8n_chat_histories","contextWindowLength":25},"type":"@n8n/n8n-nodes-langchain.memoryPostgresChat","typeVersion":1.3,"position":[-1152,0],"id":"d9ea080d-cc11-488e-b8d8-3ea138ed560a","name":"Postgres Chat Memory","credentials":{"postgres":{"id":"X78pH0HAnJIgfNp2","name":"Postgres account"}}},{"parameters":{"content":"# Model Node\n\n- **Configure credentials**\n  - Set your `OPENAI_API_KEY` (or replace with another provider’s key).\n- **Models**\n  - Select any available model for your account. You may swap the node for a different provider (Anthropic, OpenRouter, etc.) if preferred.\n- **Notes**\n  - Adjust rate limits and temperature to suit your use case.\n  - Be mindful of usage costs; long contexts and high output tokens increase spend.","height":336,"width":544,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1696,-864],"id":"1997e9a3-cfde-4fe9-90f2-16cfa2c5112e","name":"Sticky Note1"},{"parameters":{"content":"## Webhook Node\nThis should work as it is pre-configured.\n- **Method**: POST\n- **Response Mode**: Set to \"streaming\" for real-time responses\n- **Response**: Your n8n workflow should stream JSON objects back to the LangGraph using a Respond to Webhook node set to 'All Incoming Items'","height":352,"width":336,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1952,-1296],"id":"5dff2cc4-26b6-4183-ae65-209516a61248","name":"Sticky Note2"},{"parameters":{"content":"# Postgres Chat Memory Node\n\n- **Configure credentials**\n  - Set `POSTGRES_PASSWORD` in your environment (see `.env.local`).\n- **Connection (internal Docker network)**\n  - **Host**: `db`\n  - **Port**: `5432`\n  - **Database**: `postgres`\n  - **User**: `postgres`\n  - **Password**: `POSTGRES_PASSWORD`\n  - **SSL**: disabled for local development\n- **Purpose**\n  - Persists thread histories to `langconnect.n8n_chat_histories` for retrieval across workflow runs.\n- **Notes**\n  - Ensure the Supabase stack is running and reachable from the workflow container.\n  - If connection fails, verify the password and that the `db` service is healthy.","height":496,"width":544,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1536,-160],"id":"d539647c-a464-4c6e-8413-e5de21c26d32","name":"Sticky Note3"},{"parameters":{"endpointUrl":"http://mcp-server:8001/mcp","serverTransport":"httpStreamable","authentication":"headerAuth","include":"selected","includeTools":["execute_code","tavily-map","tavily-crawl","tavily-extract","tavily-search"],"options":{"timeout":360000}},"type":"@n8n/n8n-nodes-langchain.mcpClientTool","typeVersion":1.1,"position":[-80,-912],"id":"f563a334-e647-45bc-8d05-9dde2fd68a78","name":"MCP Client","credentials":{"httpHeaderAuth":{"id":"RzStLdBK4VVr00xO","name":"MCP Header Auth"}}},{"parameters":{"content":"# MCP Client Node\n\n- **How to connect (inside Docker)**  \n  - Endpoint: `http://mcp-server:8001/mcp`  \n  - Auth: send exactly one header (configure with your mcp service account key)\n    ```\n    Authorization: Bearer <MCP_SERVICE_ACCOUNT_KEY>\n    ```\n  - From your host instead: `http://localhost:8002/mcp`\n\n- **What this client can do**  \n  - Use tools that are not user‑scoped (stateless/system tools defined under `custom` toolkits).  \n  - Health checks without auth:  \n    - `GET /health`  \n    - `GET /.well-known/oauth-protected-resource`\n\n- **What it cannot do (by design)**  \n  - No OAuth or extra headers: N8N’s MCP node cannot add user context (e.g. `user_id`, `thread_id`) or run an OAuth flow.  \n  - Calls authenticate as a single service account only; the server sets `user_id=\"service_account\"` and enforces restrictions.  \n  - Therefore, do not include tools that require user identity:\n    - **Memory tools**: blocked for service accounts (expect a 403).  \n    - **Arcade tools**: require per‑user OAuth; service account calls return an authorisation prompt URL you cannot complete from N8N.","height":672,"width":592,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-496,-944],"id":"59f5339c-3878-47ff-8827-b23a82eeeb65","name":"Sticky Note4"},{"parameters":{"toolDescription":"Add a new memory for the current user. Use this to store important facts, preferences, or context that should be remembered for future conversations. Provide the memory content and optional metadata.","method":"POST","url":"http://langconnect:8080/memory/add","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"content","value":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `The memory content to store`, 'string') }}"},{"name":"agent_id","value":"={{ $('Webhook').item.json.body.config.assistant_id }}"},{"name":"run_id","value":"={{ $('Webhook').item.json.body.config.run_id }}"},{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[-2128,48],"id":"5ef5a644-7e5d-4859-a9e3-a810b8c6d557","name":"Add Memory","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"content":"# Memory Tool Nodes\n\nOur memory tools provide direct integration with LangConnect’s Memory API, enabling agents to add, search, update, and delete memories without routing through the MCP server. Each node accepts execution context from earlier workflow steps (user_id, agent_id, run_id) and applies it to the API call.\n\n- **Direct API usage**: Calls `LangConnect` endpoints from n8n (internal network URL, e.g. `http://langconnect:8080`).\n- **Context-aware**: Pass `user_id` (required for service account usage), plus optional `agent_id` and `run_id`.\n- **Full coverage**: Add, search, get, update, delete, and history operations.\n\n#### Required configuration\n\n- **Service account key (mandatory)**:\n  - Ensure the environment variable `LANGCONNECT_SERVICE_ACCOUNT_KEY` is set for LangConnect.\n  - In n8n, create a “Header Auth” credential:\n    - Header name: `Authorization`\n    - Value: `Bearer <your LANGCONNECT_SERVICE_ACCOUNT_KEY>`\n  - Select this credential in each Memory Tool node.\n\n- **User impersonation with service account**:\n  - When using the service account key, include the target `user_id`:\n    - POST endpoints: in the JSON body (e.g. `/memory/add`, `/memory/search`).\n    - GET/PUT/DELETE endpoints: as a query parameter (e.g. `/memory/{id}?user_id=...`).\n\nThis setup ensures authenticated, user-scoped memory operations from n8n, with clear attribution and auditability.","height":688,"width":1168,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-3072,-256],"id":"4c2bada4-954e-4989-9923-5fe2f733cc52","name":"Sticky Note5"},{"parameters":{"toolDescription":"Search for memories based on a query. Returns memories semantically similar to the search query, ranked by relevance. Use this to recall relevant information from past conversations.","method":"POST","url":"http://langconnect:8080/memory/search","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"query","value":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `The search query to find relevant memories`, 'string') }}"},{"name":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Name', `Maximum number of results (default: 10, max: 100)`, 'string') }}","value":"=10"},{"name":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Name', `Minimum similarity threshold 0.0-1.0 (default 0.5)`, 'string') }}","value":"=0.5"},{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[-2304,240],"id":"aba0cf20-2c49-4667-9d2b-f9d809dea20f","name":"Search Memory","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"Get all memories for the current user. Returns a paginated list of all stored memories with their IDs, content, and timestamps. Use limit and offset for pagination.","url":"http://langconnect:8080/memory/all","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"parametersQuery":{"values":[{"name":"user_id","valueProvider":"fieldValue","value":"={{ $('Webhook').item.json.body.config.user_id }}"},{"name":"limit","valueProvider":"modelOptional"},{"name":"offset","valueProvider":"modelOptional"}]},"placeholderDefinitions":{"values":[{"name":"limit","description":"Maximum number of memories to return (default: 50, max: 1000)","type":"number"},{"name":"offset","description":"Number of memories to skip for pagination (default: 0)","type":"number"}]}},"type":"@n8n/n8n-nodes-langchain.toolHttpRequest","typeVersion":1.1,"position":[-2016,224],"id":"a621e33f-cc7b-4bec-af18-6838d4de0462","name":"Get All Memories","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"Delete a specific memory by its ID. This permanently removes the memory from storage and cannot be undone.","method":"DELETE","url":"http://langconnect:8080/memory/{memory_id}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"parametersQuery":{"values":[{"name":"user_id","valueProvider":"fieldValue","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"placeholderDefinitions":{"values":[{"name":"memory_id","description":"The ID of the memory to delete","type":"string"}]}},"type":"@n8n/n8n-nodes-langchain.toolHttpRequest","typeVersion":1.1,"position":[-2160,224],"id":"59e4886b-9f06-4206-a9cc-0cdf41526bf0","name":"Delete Memory","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"Update an existing memory by its ID. Provide the memory_id and the new content.","method":"PUT","url":"http://langconnect:8080/memory/{memory_id}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"parametersQuery":{"values":[{"name":"user_id","valueProvider":"fieldValue","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"sendHeaders":true,"parametersHeaders":{"values":[{"name":"Content-Type","valueProvider":"fieldValue","value":"application/json"}]},"sendBody":true,"parametersBody":{"values":[{"name":"content","valueProvider":"modelOptional"},{"name":"metadata","valueProvider":"modelOptional"}]},"placeholderDefinitions":{"values":[{"name":"memory_id","description":"The ID of the memory to update","type":"string"},{"name":"content","description":"New content for the memory","type":"string"},{"name":"metadata","description":"New metadata for the memory as a JSON object","type":"json"}]}},"type":"@n8n/n8n-nodes-langchain.toolHttpRequest","typeVersion":1.1,"position":[-2256,48],"id":"ad5ccb3a-cfb4-4e84-a116-33c80662af7b","name":"Update Memory","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"assignments":{"assignments":[{"id":"931a13ed-fae9-4f29-a664-01a1a4892dbd","name":"collection_ids","value":"=18f7c912-3c77-4912-b049-7e7bda243b93,b11083ac-8e3b-440a-9f98-c1b761959c20","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1408,-1088],"id":"90b91b47-90e3-4eb8-8379-85b863a60bf8","name":"Set Available Collection IDs"},{"parameters":{"toolDescription":"List collections accessible to this agent with key metadata. Returns each collection's id, name, description, document count, total size, and your permission level (viewer/editor/owner). Use this to discover what collections are available before searching or reading files. Do not provide a collection ID as an input to this tool.","url":"http://langconnect:8080/agent-filesystem/collections","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"scoped_collections","value":"={{ $json.collection_ids }}"},{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[-768,528],"id":"9f8040cb-26c7-4965-8ae3-4013b0b1a3c0","name":"FS List Collections","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"Read document content with line numbers and optional pagination. Returns formatted content with metadata including document name, total lines, line range, and whether content is truncated. Use offset and limit to page through large files.","url":"=http://langconnect:8080/agent-filesystem/files/{{ $fromAI('document_id', 'Document UUID to read (required)', 'string') }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"scoped_collections","value":"={{ $json.collection_ids }}"},{"name":"include_line_numbers","value":"true"},{"name":"offset","value":"={{ $fromAI('offset', 'Starting line number, 0-based (default: 0)', 'number') || 0 }}"},{"name":"limit","value":"={{ $fromAI('limit', 'Number of lines to return (1-5000, default: 2000)', 'number') || 2000 }}"},{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[-448,528],"id":"305ac72e-5a3f-4a61-beac-15f758f09524","name":"FS Read File","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"Find lines matching text or regex patterns across files. Returns matches with line numbers, line content, and surrounding context (2 lines before/after). Supports case-sensitive search and optional collection filtering. Start with simple text, add regex as needed.","method":"POST","url":"http://langconnect:8080/agent-filesystem/files/search","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"pattern","value":"={{ $fromAI('pattern', 'Text or regex pattern to search for (required)', 'string') }}"},{"name":"collection_id","value":"={{ $fromAI('collection_id', 'Optional collection UUID to filter search', 'string') }}"},{"name":"case_sensitive","value":"={{ $fromAI('case_sensitive', 'Whether search should be case-sensitive (default: false)', 'boolean') || false }}"},{"name":"max_results","value":"={{ $fromAI('max_results', 'Maximum number of matches to return (1-500, default: 100)', 'number') || 100 }}"},{"name":"scoped_collections","value":"={{ $json.collection_ids }}"},{"name":"context_lines","value":"2"},{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[-128,528],"id":"9fbc9e01-7975-4858-92cd-fcbe4844e550","name":"FS Grep Files","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"Permanently delete a document and all its chunks/embeddings (irreversible). Requires owner permission on the collection. Returns confirmation with document name and number of chunks deleted. Confirm the target document before using this tool.","method":"DELETE","url":"=http://langconnect:8080/agent-filesystem/files/{{ $fromAI('document_id', 'Document UUID to permanently delete (required)', 'string') }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"scoped_collections","value":"={{ $json.collection_ids }}"},{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[352,528],"id":"13f10edf-caaf-4b89-9f7f-6716a14a6193","name":"FS Delete File","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"List files across your available collections or filter to a specific collection. Use this to discover files before reading or editing them. Provide the collection ID (after listing collections) not the collection name.","url":"http://langconnect:8080/agent-filesystem/files","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"scoped_collections","value":"={{ $json.collection_ids }}"},{"name":"collection_id","value":"={{ $fromAI('collection_id', 'Optional collection UUID to filter results', 'string') }}"},{"name":"limit","value":"={{ $fromAI('limit', 'Maximum number of files to return (1-500, default: 100)', 'number') || 100 }}"},{"name":"sort_by","value":"={{ $fromAI('sort_by', 'Sort field: updated_at (default), created_at, name, or size', 'string') || 'updated_at' }}"},{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[-608,528],"id":"4e0d004e-42e3-40e3-90a0-a885d5af191a","name":"FS List Files","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"content":"# File System Tools\n\n## Overview\nThese tools provide agentic file system access to the knowledge collections in Langconnect. All tools respect the `collection_ids` scoped in the agent configuration.\n\n## Collection Scoping\n- **Backend configuration**: LangGraph passes `collection_ids` in the webhook payload under `config`\n- **Tool enforcement**: Each tool injects `scoped_collections` from `$json.body.config.collection_ids`\n- **Security**: Backend validates all requests against user permissions and agent scope\n- **LLM flexibility**: LLM can optionally filter to specific collections but cannot escape the configured scope\n\n## Available Tools\n\n### Discovery Tools\n1. **FS List Collections**: Discover what collections are accessible\n2. **FS List Files**: Browse files across collections with filtering and sorting\n\n### Read Operations\n3. **FS Read File**: Read document content with line numbers and pagination\n4. **FS Hybrid Search**: Semantic + keyword search across collections\n5. **FS Grep Files**: Pattern/regex search with line matches and context\n\n### Write Operations\n6. **FS Write File**: Create new markdown documents\n7. **FS Edit File**: String replacement with diff preview\n\n### Delete Operations\n8. **FS Delete File**: Permanently remove documents (owner permission required)\n\n## Configuration Notes\n\n- **Credentials**: All tools use \"Langconnect Header Auth\" (service account)\n- **Collection IDs**: Automatically injected from  the set collection IDs node\n- **Format**: Documents use markdown format unless otherwise specified\n- **Processing**: Write/Edit operations trigger automatic re-chunking and re-embedding","height":976,"width":1328,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-848,672],"id":"3525ea96-e033-462d-b05d-9b4431234182","name":"File System Tools Overview"},{"parameters":{"content":"## Set Collection IDs\nIf you want the agent to have access to any Collections - set the available IDs in this node as a comma-separated list of IDs (string), e.g., \"18f7c912-3c77-4912-b049-7e7bda243b93,b11083ac-8e3b-440a-9f98-c1b761959c20\"\n\nThis is the 'scoped collections' - i.e., the collections the agent is available to list and then use it's file system tools over if provided.","height":384,"width":384,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1568,-1328],"id":"b2c5a298-3085-4b2d-97b3-ad2d888b25f0","name":"Sticky Note6"},{"parameters":{"model":{"__rl":true,"value":"claude-sonnet-4-20250514","mode":"list","cachedResultName":"Claude Sonnet 4"},"options":{"maxTokensToSample":10000,"thinking":false}},"type":"@n8n/n8n-nodes-langchain.lmChatAnthropic","typeVersion":1.3,"position":[-1248,-864],"id":"a69b1440-c826-4cfe-93a4-b4ad9df98835","name":"Anthropic Chat Model","credentials":{"anthropicApi":{"id":"QQ0ecnqQce2YIMuP","name":"Anthropic account"}}},{"parameters":{"toolDescription":"Create a new document in a collection using markdown format unless otherwise specified. Provide a clear title and well-formatted content for best retrieval quality. HIGHLY RECOMMENDED: Include a description to help future retrieval - it allows quick understanding of what the document contains and when it's useful, without needing to read the entire file. Returns document_id, size, and processing status. Document will be automatically chunked and embedded.","method":"POST","url":"=http://langconnect:8080/agent-filesystem/collections/{{ $fromAI('collection_id', 'Target collection UUID (required)', 'string') }}/files","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"name","value":"={{ $fromAI('name', 'Document name/title (required)', 'string') }}"},{"name":"content","value":"={{ $fromAI('content', 'Document content in markdown format (required)', 'string') }}"},{"name":"description","value":"={{ $fromAI('description', 'Brief 1-2 line description of document content and use case. Highly recommended for future retrieval - helps understand content without reading full file', 'string') }}"},{"name":"scoped_collections","value":"={{ $json.collection_ids }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[32,528],"id":"3ee781a2-46e9-468b-ad6f-7e3b323f5563","name":"FS Write File","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"Edit a document using targeted string replacement OR complete document replacement. Two modes: (1) Targeted Replacement: Replace specific text by providing old_string and new_string. Read file first and include unique surrounding context in old_string. Set replace_all=true to replace all occurrences. (2) Complete Replacement: Replace entire document by setting replace_entire_document=true and providing only new_string. Use this for major rewrites. Returns minimal success/error response to save tokens. Document will be automatically re-chunked and re-embedded.","method":"PATCH","url":"=http://langconnect:8080/agent-filesystem/files/{{ $fromAI('document_id', 'Document UUID to edit (required)', 'string') }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"new_string","value":"={{ $fromAI('new_string', 'Replacement text (or entire new document content if replace_entire_document=true) (required)', 'string') }}"},{"name":"old_string","value":"={{ $fromAI('old_string', 'Exact text to replace; include unique surrounding context (required unless replace_entire_document=true)', 'string') }}"},{"name":"replace_all","value":"={{ $fromAI('replace_all', 'Replace all occurrences of old_string (default: false)', 'boolean') || false }}"},{"name":"replace_entire_document","value":"={{ $fromAI('replace_entire_document', 'Replace entire document content with new_string; ignores old_string and replace_all (default: false)', 'boolean') || false }}"},{"name":"description","value":"={{ $fromAI('description', 'Updated description if content changes warrant it. Recommended when edits significantly change document purpose or content', 'string') }}"},{"name":"scoped_collections","value":"={{ $json.collection_ids }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[192,528],"id":"c6f8d0a2-6c74-4c18-840f-abc7df7eeac2","name":"FS Edit File","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}},{"parameters":{"toolDescription":"Search across your scoped collections using hybrid semantic + keyword search. Combines vector similarity with keyword matching for comprehensive results. Returns LLM-formatted content with document citations and context. Optionally filter to a specific collection. Use limit to control result count (1-20), max_context_characters for context size (0-10000), and semantic_weight to balance semantic vs keyword emphasis (0.0-1.0, default 0.6).","method":"POST","url":"http://langconnect:8080/agent-filesystem/search","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"user_id","value":"={{ $('Webhook').item.json.body.config.user_id }}"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"query","value":"={{ $fromAI('query', 'Natural language search query (required)', 'string') }}"},{"name":"keywords","value":"={{ ($fromAI('keywords', 'Optional comma-separated keywords (e.g., \"AI, machine learning\")', 'string') || '').split(',').map(k => k.trim()).filter(k => k) }}"},{"name":"collection_id","value":"={{ $fromAI('collection_id', 'Optional collection UUID to limit search scope', 'string') || null }}"},{"name":"limit","value":"={{ $fromAI('limit', 'Maximum number of results (1-20, default: 5)', 'number') || 5 }}"},{"name":"max_context_characters","value":"={{ $fromAI('max_context_characters', 'Maximum context characters per result (0-10000, default: 2500)', 'number') || 2500 }}"},{"name":"semantic_weight","value":"={{ $fromAI('semantic_weight', 'Weight for semantic vs keyword (0.0-1.0, default: 0.6)', 'number') || 0.6 }}"},{"name":"scoped_collections","value":"={{ $json.collection_ids }}"},{"name":"return_surrounding_context","value":true},{"name":"format_chunks_for_llm","value":true}]},"options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[-288,528],"id":"0e7129c7-52e6-44f2-87f5-c7c1180a016b","name":"FS Hybrid Search","credentials":{"httpHeaderAuth":{"id":"F20PODB3nfvxF5Co","name":"Langconnect Header Auth"}}}],"connections":{"Webhook":{"main":[[{"node":"Set Available Collection IDs","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[]]},"AI Agent":{"main":[[{"node":"Respond to Webhook","type":"main","index":0}]]},"Postgres Chat Memory":{"ai_memory":[[{"node":"AI Agent","type":"ai_memory","index":0}]]},"MCP Client":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Add Memory":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Search Memory":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Update Memory":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Delete Memory":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Get All Memories":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Set Available Collection IDs":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"FS List Files":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"FS List Collections":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"FS Read File":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"FS Grep Files":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"FS Delete File":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Anthropic Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"FS Write File":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"FS Edit File":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"FS Hybrid Search":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"Webhook":[{"json":{"headers":{"host":"localhost:5678","content-type":"application/json","accept":"*/*","accept-encoding":"gzip, deflate","user-agent":"Python/3.12 aiohttp/3.12.15","content-length":"886"},"params":{},"query":{},"body":{"thread_id":"191b1878-b3c4-498e-8c3f-338b8c14876a","user_message":"what files are in that collection? (use the collection id, not the name, as the input)","config":{"webhook_url":"http://localhost:5678/webhook/4dd6b459-552b-41da-8865-c8b60e4022ed","langgraph_auth_user_id":"f243cd80-a497-4f8b-915b-097d0a868b00","langgraph_auth_permissions":[],"langgraph_request_id":"b4fc90f2-7a34-4926-b783-2ecbdbe297de","__request_start_time_ms__":1759297418128,"__after_seconds__":0,"run_id":"01999e4c-3397-73c2-83b7-50a66b5fe814","thread_id":"191b1878-b3c4-498e-8c3f-338b8c14876a","graph_id":"n8n_agent","assistant_id":"45cc340a-ae16-4835-a6a2-9589ce263763","user_id":"7d3d91a4-46d0-4365-8ccf-4feecc02c2ac","__pregel_durability":"async","__pregel_task_id":"6a1c0720-e7f8-a08e-85b7-d020efc148bd","checkpoint_map":{"":"1f09e899-49d4-6a0a-8000-2cfb7d7e8937"},"checkpoint_id":null,"checkpoint_ns":"n8n_bridge:6a1c0720-e7f8-a08e-85b7-d020efc148bd"}},"webhookUrl":"http://localhost:5678/webhook/4dd6b459-552b-41da-8865-c8b60e4022ed","executionMode":"production"}}]},"versionId":"04e1856a-8d59-4db7-8f9f-020128cf1bec","triggerCount":1,"tags":[]}