"""
Agent collaboration API endpoints for graph and assistant management.

This module serves as the main router orchestrator, combining:
- Graph lifecycle management (scan, initialize, cleanup)
- Graph permission management (list, grant, revoke access)
- Assistant lifecycle management (list, register, update, delete, sync)
- Assistant permission management (share, revoke access, view permissions)

The endpoints are organized into logical modules for better maintainability:
- graph_actions/ - Graph discovery, initialization, cleanup, and permissions
- assistant_actions/ - Assistant registration, updates, deletion, sharing, and permissions
"""

import logging
from fastapi import APIRouter

from .graph_actions import graph_router
from .assistant_actions import assistant_router
from . import admin_actions
from . import mirror_apis

# Set up logging
log = logging.getLogger(__name__)

# Create main router
router = APIRouter(prefix="/agents")

# Include sub-routers
router.include_router(graph_router)
router.include_router(assistant_router)
router.include_router(admin_actions.router)
router.include_router(mirror_apis.router)

# Export router for server registration
agents_router = router

# Log the refactoring completion
log.info("Agent collaboration API V2 loaded with modular architecture")
log.info("- Graph actions: lifecycle + permissions")
log.info("- Assistant actions: lifecycle + permissions")
log.info("- Activity logging: CRUD operations only (read-only operations no longer logged)")

# ==================== MODULE SUMMARY ====================
#
# ðŸ“Š GRAPH MANAGEMENT (graph_actions/)
# â”œâ”€â”€ lifecycle.py
# â”‚   â”œâ”€â”€ GET /graphs/scan - Discover and validate graphs âœ… (no activity logging)
# â”‚   â”œâ”€â”€ POST /graphs/{id}/initialize - Setup new graph âœ… (logs activity)
# â”‚   â””â”€â”€ DELETE /graphs/cleanup - Remove orphaned graphs âœ… (logs activity)
# â””â”€â”€ permissions.py
#     â”œâ”€â”€ GET /graphs - List accessible graphs âœ… (no activity logging)
#     â”œâ”€â”€ GET /graphs/{id}/permissions - Get permissions âœ… (no activity logging)
#     â”œâ”€â”€ POST /graphs/{id}/permissions - Grant access âœ… (logs activity)
#     â””â”€â”€ DELETE /graphs/{id}/permissions/{user} - Revoke access âœ… (logs activity)
#
# ðŸ¤– ASSISTANT MANAGEMENT (assistant_actions/)
# â”œâ”€â”€ lifecycle.py
# â”‚   â”œâ”€â”€ GET /assistants - List accessible assistants âœ… (no activity logging)
# â”‚   â”œâ”€â”€ POST /assistants - Register assistant âœ… (logs activity)
# â”‚   â”œâ”€â”€ GET /assistants/{id} - Get details âœ… (no activity logging)
# â”‚   â”œâ”€â”€ PATCH /assistants/{id} - Update assistant âœ… (logs activity)
# â”‚   â”œâ”€â”€ DELETE /assistants/{id} - Delete assistant âœ… (logs activity)
# â”‚   â””â”€â”€ POST /assistants/sync - Sync from LangGraph âœ… (logs activity)
# â””â”€â”€ permissions.py
#     â”œâ”€â”€ POST /assistants/{id}/share - Share assistant âœ… (logs activity)
#     â”œâ”€â”€ DELETE /assistants/{id}/permissions/{user} - Revoke access âœ… (logs activity)
#     â””â”€â”€ GET /assistants/{id}/permissions - Get sharing details âœ… (no activity logging)
#
# ==================== BENEFITS ACHIEVED ====================
#
# âœ… Activity Logging Cleanup:
#    - Removed from 6 read-only operations
#    - Kept for 10 CRUD operations
#    - Cleaner audit trails focusing on actual changes
#
# âœ… Modular Architecture:
#    - 4 focused modules vs 1 monolithic file
#    - Clear separation: lifecycle vs permissions
#    - Easier testing and maintenance
#
# âœ… Reduced Complexity:
#    - ~2,300 lines â†’ ~600 lines per module
#    - Single responsibility per module
#    - Reusable components
#
# âœ… Better Organization:
#    - graph_actions/ and assistant_actions/ namespaces
#    - Logical grouping of related endpoints
#    - Cleaner import structure
