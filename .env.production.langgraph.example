# ==============================================================================
#            AGENT OS PRODUCTION ENVIRONMENT - LANGGRAPH CLOUD
# ==============================================================================
#
# DEPLOYMENT ORDER & WORKFLOW:
#
# 1. FIRST: Deploy to Coolify using .env.production.coolify.example
#    - Configure all Coolify environment variables
#    - Leave LangGraph deployment details as placeholders
#    - Deploy and verify all services are accessible
#    - Test: All URLs resolve with valid SSL certificates
#
# 2. SECOND: Deploy to LangGraph Cloud using THIS FILE
#    - Copy all variables below into LangGraph Cloud environment
#    - Set langgraph.json location to: langgraph/langgraph.json
#    - Deploy and wait for completion
#
# 3. THIRD: Copy LangGraph deployment details back to Coolify
#    - After LangGraph deployment succeeds, collect from dashboard:
#      * Deployment ID (in URL or deployment details)
#      * Tenant ID (in URL or deployment details)
#      * API URL (deployment endpoint, e.g., https://xxx.eu.langgraph.app)
#    - Update these in Coolify:
#      * LANGGRAPH_EXTERNAL_URL
#      * LANGGRAPH_DEPLOYMENT_ID
#      * LANGGRAPH_TENANT_ID
#      * NEXT_PUBLIC_LANGGRAPH_API_URL
#    - Redeploy in Coolify to complete integration
#
# 4. VERIFY: Test end-to-end agent execution
#    - Login to frontend as dev_admin
#    - Click "Initialize Platform" on Agents page
#    - Create a chat and test agent responses
#    - Verify tools execute correctly via MCP server
#
# ==============================================================================


# ==============================================================================
#                          AI MODEL PROVIDERS
# ==============================================================================
#
# API keys for language models used by LangGraph agents
# At minimum, provide one of: OpenAI or Anthropic
#

# -- OpenAI --
# Used for: GPT-4, GPT-3.5-turbo, text embeddings
# Get key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-your-openai-api-key

# -- Anthropic --
# Used for: Claude 3 Opus, Sonnet, Haiku models
# Get key from: https://console.anthropic.com/
ANTHROPIC_API_KEY=your-anthropic-api-key


# ==============================================================================
#                          TOOL API KEYS
# ==============================================================================
#
# External services that agents can use via tools
# All optional - agents will skip tools if keys are missing
#

# -- Tavily Search --
# Provides web search capabilities for agents
# Get key from: https://tavily.com
TAVILY_API_KEY=your-tavily-api-key

# -- E2B Code Sandbox --
# Allows agents to execute code in isolated environments
# Get key from: https://e2b.dev
E2B_API_KEY=your-e2b-api-key

# -- Arcade (Optional) --
# OAuth-based tool access to external services
# Get key from: https://docs.arcade.dev
# NOTE: Only needed if ENABLE_ARCADE=true
ARCADE_API_KEY=your-arcade-api-key


# ==============================================================================
#                   AGENT OS INTEGRATION - URLs
# ==============================================================================
#
# URLs to connect LangGraph agents back to your Agent OS deployment
# CRITICAL: These must match the URLs configured in Coolify
# Update 'yourdomain.com' with your actual production domain
#

# -- MCP Server --
# Agents call this URL to execute tools
# Must be the public HTTPS URL configured in Coolify
LANGGRAPH_MCP_SERVER_URL=https://mcp.yourdomain.com

# -- Supabase --
# For authentication context and user data
SUPABASE_PUBLIC_URL=https://supabase.yourdomain.com
SUPABASE_ANON_KEY=your-supabase-anon-key

# -- Frontend --
# Used for OAuth callbacks and user context
FRONTEND_BASE_URL=https://app.yourdomain.com


# ==============================================================================
#                   AGENT OS INTEGRATION - AUTHENTICATION
# ==============================================================================
#
# Service account keys for secure service-to-service communication
# CRITICAL: These MUST exactly match the values set in Coolify
#

# -- LangConnect Service Account --
# Allows LangGraph to call LangConnect API for knowledge base access
# Must match LANGCONNECT_SERVICE_ACCOUNT_KEY in Coolify
LANGCONNECT_SERVICE_ACCOUNT_KEY=your-langconnect-service-account-key

# -- MCP Service Account --
# Allows LangGraph to authenticate with MCP server for tool execution
# Must match MCP_SERVICE_ACCOUNT_KEY in Coolify
MCP_SERVICE_ACCOUNT_KEY=your-mcp-service-account-key

# -- MCP Token Signing Secret --
# Used to verify tokens when calling MCP server
# Must match MCP_TOKEN_SIGNING_SECRET in Coolify
MCP_TOKEN_SIGNING_SECRET=your-mcp-token-signing-secret


# ==============================================================================
#                     ARCADE CONFIGURATION (OPTIONAL)
# ==============================================================================
#
# Only required if you want agents to use Arcade-powered tools
# Arcade provides OAuth flows for Gmail, Slack, Microsoft, Google Drive, etc.
#

# -- Enable Arcade --
# Set to true to enable Arcade tool integrations
ENABLE_ARCADE=false

# -- Arcade Services --
# Comma-separated list of Arcade toolkits to enable
# Options: microsoft, gmail, google, slack, github, notion, etc.
# See: https://docs.arcade.dev/toolkits
ENABLED_ARCADE_SERVICES=microsoft,gmail,google,slack


# ==============================================================================
#                   GCP IMAGE STORAGE (OPTIONAL)
# ==============================================================================
#
# Only required if processing images in knowledge bases
# Must match settings in Coolify if enabled
#

# -- Enable Image Storage --
IMAGE_STORAGE_ENABLED=false

# -- GCP Configuration --
# Only fill these in if IMAGE_STORAGE_ENABLED=true
GCP_PROJECT_ID=your-gcp-project-id
GCP_STORAGE_BUCKET=your-gcp-storage-bucket-name
GCP_SERVICE_ACCOUNT_KEY=your-base64-encoded-gcp-service-account-key
IMAGE_PUBLIC_ACCESS=true


# ==============================================================================
#                   MONITORING & OBSERVABILITY
# ==============================================================================
#
# Optional: Sentry error tracking for LangGraph agent execution
#

# -- Sentry Configuration --
# Get DSN from: https://sentry.io
SENTRY_DSN_LANGGRAPH=your-sentry-dsn
SENTRY_ENVIRONMENT=production                    # Or 'development' for dev deployments
SENTRY_TRACES_SAMPLE_RATE=0.1                    # 10% trace sampling (reduce costs)
SENTRY_PROFILES_SAMPLE_RATE=0.0                  # Disable profiling in production


# ==============================================================================
#                      DEPLOYMENT NOTES
# ==============================================================================
#
# LANGGRAPH CLOUD DEPLOYMENT SETTINGS:
# - Environment: Choose "Development" (free with seat) or "Production" ($39/mo + usage)
# - Config File: Set path to langgraph/langgraph.json
# - Build Command: Uses defaults (no customization needed)
# - Region: Choose based on your users (EU or US)
#
# AFTER DEPLOYMENT:
# 1. Wait for deployment to complete (5-10 minutes)
# 2. Copy from LangGraph dashboard:
#    - Deployment ID (found in URL or deployment info)
#    - Tenant ID (found in URL or deployment info)  
#    - API URL (the full HTTPS endpoint)
# 3. Update these values in Coolify environment:
#    - LANGGRAPH_EXTERNAL_URL=https://your-hash.langgraph.app
#    - LANGGRAPH_DEPLOYMENT_ID=your-deployment-id
#    - LANGGRAPH_TENANT_ID=your-tenant-id
#    - NEXT_PUBLIC_LANGGRAPH_API_URL=https://your-hash.langgraph.app
# 4. Redeploy in Coolify
# 5. Test agent execution from frontend
#
# TROUBLESHOOTING:
# - If agents can't execute tools: Verify MCP_SERVICE_ACCOUNT_KEY matches
# - If agents can't access knowledge: Verify LANGCONNECT_SERVICE_ACCOUNT_KEY matches
# - If OAuth flows fail: Verify FRONTEND_BASE_URL and SUPABASE_PUBLIC_URL are correct
# - Check LangSmith traces for detailed execution logs
#
# ==============================================================================