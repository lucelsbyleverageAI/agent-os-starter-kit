# ==============================================================================
#                   AGENT OS LOCAL ENVIRONMENT CONFIGURATION
# ==============================================================================
#
# SETUP INSTRUCTIONS:
# 1. Copy this file to `.env.local` in the project root
# 2. Fill in all required values (marked as 'your-...' or 'sk-...')
# 3. Generate secure random values for secrets using: openssl rand -base64 32
# 4. Run `make start-dev` to start all local services
#
# ==============================================================================


# ==============================================================================
#                          BASE CONFIGURATION
# ==============================================================================
#
# These define the base URLs for all services running locally.
# Ports are already configured in docker-compose.local.dev.yml
#
PLATFORM_DOMAIN=localhost
PLATFORM_PROTOCOL=http

# Derived base URLs - only override if you have custom port configurations
FRONTEND_BASE_URL=${PLATFORM_PROTOCOL}://${PLATFORM_DOMAIN}:3000
SUPABASE_PUBLIC_URL=${PLATFORM_PROTOCOL}://${PLATFORM_DOMAIN}:8000
LANGCONNECT_BASE_URL=${PLATFORM_PROTOCOL}://${PLATFORM_DOMAIN}:8080
MCP_PUBLIC_URL=${PLATFORM_PROTOCOL}://${PLATFORM_DOMAIN}:8002
N8N_PUBLIC_URL=${PLATFORM_PROTOCOL}://${PLATFORM_DOMAIN}:5678
WINDMILL_PUBLIC_URL=${PLATFORM_PROTOCOL}://${PLATFORM_DOMAIN}:9000

# LangGraph runs locally via `langgraph dev` on port 2024
# The host.docker.internal address allows Docker containers to reach your host machine
LANGGRAPH_EXTERNAL_URL=http://host.docker.internal:2024


# ==============================================================================
#                         SUPABASE CONFIGURATION
# ==============================================================================
#
# Supabase provides authentication, database, and storage services.
# Generate JWT secrets and keys at: https://supabase.com/docs/guides/self-hosting/docker
#

# -- PostgreSQL Database Password --
# Used by all Supabase services to connect to the database
# Generate with: openssl rand -base64 32
POSTGRES_PASSWORD=your-super-secret-and-long-postgres-password

# -- JWT Secret and API Keys --
# JWT_SECRET: Used to sign authentication tokens (min 32 characters)
# SUPABASE_ANON_KEY: Public key for client-side API calls (read/write with RLS)
# SUPABASE_SERVICE_KEY: Admin key for server-side operations (bypasses RLS)
# Generate all three using the Supabase self-hosting guide via link above
JWT_SECRET=your-super-secret-jwt-secret-with-at-least-32-characters-long
SUPABASE_ANON_KEY=your-supabase-anon-key
SUPABASE_SERVICE_KEY=your-supabase-service-key

# -- Supabase Auth Configuration --
# Control user registration and authentication features
DISABLE_SIGNUP=true                    # Prevent public sign-ups (admins create users)
ENABLE_EMAIL_SIGNUP=true               # Allow email/password authentication
ENABLE_EMAIL_AUTOCONFIRM=false         # Require email verification (set true to skip)
ENABLE_ANONYMOUS_USERS=false           # Allow anonymous sessions
ENABLE_PHONE_SIGNUP=false              # Allow SMS-based authentication

# -- SMTP Configuration for Transactional Emails --
# Used for: password resets, email verification, magic links, invitations
# Gmail setup: Enable 2FA → App Passwords → Generate password
SMTP_HOST=smtp.gmail.com                      # Gmail SMTP server
SMTP_PORT=587                                 # Standard SMTP port
SMTP_USER=your-email@gmail.com                # Your Gmail address
SMTP_PASS=your-gmail-app-password             # Gmail app password (not account password)
SMTP_ADMIN_EMAIL=admin@your-domain.com        # "From" address for system emails
SMTP_SENDER_NAME="Agent Platform"             # Display name for system emails

# -- Supabase Connection Pooling Secrets --
# Required by Supavisor (connection pooler) for encryption and JWT signing
# Generate with: openssl rand -base64 64 | tr -d '\n'
SECRET_KEY_BASE=your-base64-secret-key
VAULT_ENC_KEY=your-base64-encryption-key

# -- Supabase Studio Dashboard Credentials --
# Login credentials for Supabase Studio at http://localhost:8000
# Change from defaults for production!
DASHBOARD_USERNAME=admin
DASHBOARD_PASSWORD=password


# ==============================================================================
#                     LANGCONNECT API CONFIGURATION
# ==============================================================================
#
# LangConnect is the FastAPI backend that handles:
# - Document ingestion and processing (RAG)
# - Vector embeddings and search
# - Agent/assistant metadata storage
# - Knowledge base management
#

# -- Service Account Authentication --
# Internal admin key for service-to-service communication
# Used when backend services need to call LangConnect without user context
# Generate with: openssl rand -base64 32
LANGCONNECT_SERVICE_ACCOUNT_KEY=your-super-secret-internal-admin-key

# -- GCP Image Storage (Optional) --
# Enable Google Cloud Storage for image uploads in knowledge bases
# Required for: documents with images, OCR processing, image-based RAG
IMAGE_STORAGE_ENABLED=false                   # Set to true if using GCP storage
GCP_PROJECT_ID=your-gcp-project-id            # Your GCP project ID
GCP_STORAGE_BUCKET=your-gcp-storage-bucket    # GCS bucket name
GCP_SERVICE_ACCOUNT_KEY=your-base64-key       # Base64-encoded service account JSON
IMAGE_PUBLIC_ACCESS=true                      # Make uploaded images publicly accessible


# ==============================================================================
#                        MCP SERVER CONFIGURATION
# ==============================================================================
#
# The MCP (Model Context Protocol) server provides:
# - Secure tool gateway for AI agents
# - OAuth-based authentication for third-party clients
# - Integration with external services (Arcade, custom tools)
#

# -- MCP Authentication Secrets --
# MCP_TOKEN_SIGNING_SECRET: Signs short-lived access tokens for tool execution
# MCP_SERVICE_ACCOUNT_KEY: Static key for automated service-to-service calls
# Both should be long random strings. Generate with: openssl rand -base64 32
MCP_TOKEN_SIGNING_SECRET=your-super-secret-mcp-token-signing-secret
MCP_SERVICE_ACCOUNT_KEY=your-super-secret-service-account-key

# -- Arcade Integration (Optional) --
# Arcade provides OAuth-based tool access to external services
# Get API key from: https://docs.arcade.dev
ENABLE_ARCADE=true                                    # Enable Arcade tools
ENABLED_ARCADE_SERVICES=microsoft,gmail,google,slack  # Comma-separated list of services
ARCADE_API_KEY=                                       # Your Arcade API key


# ==============================================================================
#                       LANGGRAPH CONFIGURATION
# ==============================================================================
#
# LangGraph handles AI agent orchestration and execution.
# Local development runs via `langgraph dev` (started automatically by make start-dev)
# Production uses LangGraph Cloud (configured separately)
#

# -- LangSmith Tracing (Required) --
# LangSmith provides debugging, monitoring, and tracing for agent runs
# Get API key from: https://smith.langchain.com
LANGSMITH_TRACING=true                              # Enable tracing (recommended)
LANGSMITH_ENDPOINT=https://eu.api.smith.langchain.com  # Or us.api.smith.langchain.com
LANGSMITH_PROJECT=agent-os-dev                      # Project name in LangSmith
LANGSMITH_API_KEY=ls__your-api-key                  # Your LangSmith API key

# -- MCP Server URL for Tool Calls --
# LangGraph agents call the MCP server to execute tools
# Must be accessible from LangGraph (use localhost for local dev)
LANGGRAPH_MCP_SERVER_URL=${MCP_PUBLIC_URL}


# ==============================================================================
#                      WEB FRONTEND CONFIGURATION
# ==============================================================================
#
# Next.js application that provides the user interface.
# Variables with NEXT_PUBLIC_ prefix are exposed to the browser.
#

# -- Supabase Client Configuration --
# Used by browser and server for authentication and API calls
NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_PUBLIC_URL}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}

# -- Service URLs --
# Frontend needs to know where to reach backend services (given the frontend is outside the docker network in local dev, the langgraph API must be set to localhost and not host.docker.internal)
NEXT_PUBLIC_LANGCONNECT_API_URL=${LANGCONNECT_BASE_URL}
NEXT_PUBLIC_MCP_SERVER_URL=${MCP_PUBLIC_URL}
NEXT_PUBLIC_LANGGRAPH_API_URL=http://localhost:2024
NEXT_PUBLIC_N8N_URL=${N8N_PUBLIC_URL}
NEXT_PUBLIC_WINDMILL_URL=${WINDMILL_PUBLIC_URL}
NEXT_PUBLIC_BASE_API_URL=${FRONTEND_BASE_URL}/api

# -- LangGraph Deployment Configuration --
# For local dev, these are placeholder UUIDs that work with `langgraph dev`
# In production, get these values from your LangGraph Cloud deployment
NEXT_PUBLIC_LANGGRAPH_DEPLOYMENT_ID=cfceb904-6917-4485-a965-f1d7e472c269  # Any valid UUID v4
NEXT_PUBLIC_LANGGRAPH_TENANT_ID=ee2402c9-8454-4af6-9504-8a881ac22744      # Any valid UUID v4
NEXT_PUBLIC_LANGGRAPH_DEFAULT_GRAPH_ID=tools_agent                        # Default agent to use

# -- Feature Flags --
NEXT_PUBLIC_GOOGLE_AUTH_DISABLED=true               # Disable Google OAuth (not configured locally)
NEXT_PUBLIC_FRONTEND_BASE_URL=${FRONTEND_BASE_URL}  # Used for OAuth callbacks
NEXT_PUBLIC_IMAGE_STORAGE_ENABLED=${IMAGE_STORAGE_ENABLED}


# ==============================================================================
#                      WORKFLOW AUTOMATION SERVICES
# ==============================================================================
#
# n8n and Windmill provide workflow automation and no-code/low-code capabilities
#

# -- n8n Configuration --
# n8n stores workflows and credentials in the shared PostgreSQL database
# Encryption keys must remain constant or you'll lose access to encrypted data
# Generate with: openssl rand -base64 32
N8N_ENCRYPTION_KEY=your-super-secret-n8n-encryption-key
N8N_USER_MANAGEMENT_JWT_SECRET=your-super-secret-n8n-jwt-secret

# -- Windmill Configuration --
# Windmill uses a dedicated PostgreSQL database (separate from Supabase)
# These credentials are used to create and access the Windmill database
SERVICE_USER_POSTGRES=windmill
SERVICE_PASSWORD_POSTGRES=your-super-secret-windmill-db-password


# ==============================================================================
#                       EXTERNAL API KEYS
# ==============================================================================
#
# API keys for third-party services used by AI agents and tools
# All are optional but enable specific capabilities when provided
#

# -- AI Model Providers --
OPENAI_API_KEY=sk-your-openai-api-key          # For GPT models (gpt-4, gpt-3.5-turbo, etc.)
ANTHROPIC_API_KEY=your-anthropic-api-key       # For Claude models (claude-3-opus, etc.)

# -- Tool APIs --
TAVILY_API_KEY=your-tavily-api-key             # Web search capabilities
E2B_API_KEY=your-e2b-api-key                   # Code sandbox execution environment
SUPADATA_API_TOKEN=your-supadata-token         # YouTube transcript extraction


# ==============================================================================
#                        MONITORING & OBSERVABILITY
# ==============================================================================
#
# Sentry provides error tracking and performance monitoring (optional)
# Get DSN from: https://sentry.io
#

SENTRY_DSN_LANGCONNECT=                        # Sentry DSN for LangConnect service
SENTRY_DSN_MCP=                                # Sentry DSN for MCP server
SENTRY_DSN_WEB=                                # Sentry DSN for web frontend
SENTRY_DSN_LANGGRAPH=                          # Sentry DSN for LangGraph agents
SENTRY_ENVIRONMENT=development                 # Environment tag for Sentry events
SENTRY_TRACES_SAMPLE_RATE=1.0                  # 100% trace sampling (reduce in production)
SENTRY_PROFILES_SAMPLE_RATE=0.0                # 0% profiling (enable only when debugging)